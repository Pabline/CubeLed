/*Inicio del código*/

#include <avr/interrupt.h>
#include <string.h>
#define eje_X 1
#define eje_Y 2
#define eje_Z 3

volatile unsigned char cubo[8][8];
volatile int capaActual = 0;


/*********************************************** INICIO SETUP ***************************************************/

void setup()
{
  int i;
  
  for(i=0; i<14; i++)
    pinMode(i, OUTPUT);
  
  DDRC = 0xff;
  PORTC = 0x00;
  
  TCCR2A = 0x00;
  TCCR2B = 0x00;

  TCCR2A |= (0x01 << WGM21);
  OCR2A = 10;
  TCNT2 = 0x00;
  TCCR2B |= (0x01 << CS22) | (0x01 << CS21);
  
  TIMSK2 |= (0x01 << OCIE2A);
}

/*********************************************** FIN SETUP ****************************************************/

/*********************************************** INICIO ISR ***************************************************/
// ISR es como se llama al compilador para asociar una función con un error/interrupción especifico.
// Se puede usar en cualquier origen de errores/interrupción.
// Solo se puede asociar una función con cada origen de error/interrupción

ISR (TIMER2_COMPA_vect) 
{
  int i;
  
  // todas las capas seleccinadas apagadas
  PORTC = 0x00;
  PORTB &= 0x0f;
  
  PORTB |= 0x08; // salida habilitada off.
  
  for (i=0; i<8; i++)
  {
    PORTD = cubo[capaActual][i];
    PORTB = (PORTB & 0xF8) | (0x07 & (i+1));
  }
  
  PORTB &= 0b00110111; // Salida habilitada on.
  
  if (capaActual < 6)
  {
    PORTC = (0x01 << capaActual);
  } else if (capaActual == 6)
  {
    digitalWrite(12, HIGH);
  } else
  {
    digitalWrite(13, HIGH);
  }
  
  capaActual++;
  
  if (capaActual == 8)
    capaActual = 0;
}

/*********************************************** FIN ISR ****************************************************/

/********************************************** INICIO LOOP *************************************************/

void loop()
{
  int i,x,y,z;//sobraría, pero comprobar
  
  while (true)//también sobraría, creo, pero comprobar con el cubo
  {
    lluvia(100);
  }
}

/*********************************************** FIN LOOP ***************************************************/


/*********************************************** INICIO LLUVIA **********************************************/

void lluvia (int iterations)
{
	int i, ii;
	int rnd_x;
	int rnd_y;
	int rnd_num;
	
	for (ii=0;ii<iterations;ii++)
	{
		rnd_num = rand()%4;
		
		for (i=0; i < rnd_num;i++)
		{
			rnd_x = rand()%8;
			rnd_y = rand()%8;
			setvoxel(rnd_x,rnd_y,7);
		}
		
		delay_ms(1000);
		mueve(eje_Z,-1);
	}
}

/*********************************************** FIN LLUVIA ***************************************************/

//Este efecto utiliza estas funciones:

// Enciende un solo voxel (LED)

void setvoxel(int x, int y, int z)
{
	if (dentro(x,y,z))
		cubo[z][y] |= (1 << x);
}

/***********************************************************************************************************
 * Cambia el contenido del cubo a lo largo de un eje.                                                      *
 * Se usa para efectos donde quieres que se dibuje algo en una cara del cubo y que fluya hacia otra cara,  *
 * como lo lluvia que cae hacia la parte de abajo.                                                         *
 ***********************************************************************************************************/

void mueve (char eje, int direccion)
{
	int i, x ,y;
	int ii, j;
	int estado;

	for (i = 0; i < 8; i++)
	{
		if (direccion == -1)
		{
			ii = i;
		} else
		{
			ii = (7-i);
		}	
	
	
		for (x = 0; x < 8; x++)
		{
			for (y = 0; y < 8; y++)
			{
				if (direccion == -1)
				{
					j = ii+1;
				} else
				{
					j = ii-1;
				}
				
				if (eje == eje_Z)
				{
					estado = getvoxel(x,y,j);
					altervoxel(x,y,ii,estado);
				}
				
				if (eje == eje_Y)
				{
					estado = getvoxel(x,j,y);
					altervoxel(x,ii,y,estado);
				}
				
				if (eje == eje_X)
				{
					estado = getvoxel(j,y,x);
					altervoxel(ii,y,x,estado);
				}
			}
		}
	}
	
	if (direccion == -1)
	{
		i = 7;
	} else
	{
		i = 0;
	}	
	
	for (x = 0; x < 8; x++)
	{
		for (y = 0; y < 8; y++)
		{
			if (eje == eje_Z)
				clrvoxel(x,y,i);
				
			if (eje == eje_Y)
				clrvoxel(x,i,y);
			
			if (eje == eje_X)
				clrvoxel(i,y,x);
		}
	}
}

// Devuelve el estado actual del voxel (LED).

unsigned char getvoxel(int x, int y, int z)
{
	if (dentro(x,y,z))
	{
		if (cubo[z][y] & (1 << x))
		{
			return 0x01;
		} else
		{
			return 0x00;
		}
	} else
	{
		return 0x00;
	}
}

//Establece un voxel (LED) a ON.

void clrvoxel(int x, int y, int z)
{
	if (dentro(x,y,z))
		cubo[z][y] &= ~(1 << x);
}

//En algún efecto solo queremos coger un solo bool y guardalo en un voxel (LED).
//Esta función llama a la manipulación del voxel (LED) apropiada.

void altervoxel(int x, int y, int z, int estado)
{
	if (estado == 1)
	{
		setvoxel(x,y,z);
	} else
	{
		clrvoxel(x,y,z);
	}
}

//Habría que mirar como hacer un delay diferente, que este no se si funciona correctamente, 
//aparte, es muy lioso y no esntiendo exactamente lo que hace

void delay_ms(uint16_t x)
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
    for ( y = 0 ; y < 90 ; y++){
      for ( z = 0 ; z < 6 ; z++){
        asm volatile ("nop");
      }
    }
  }
}

//Comprueba que se está dibujando dentro del cubo

unsigned char dentro(int x, int y, int z)
{
	if (x >= 0 && x < 8 && y >= 0 && y < 8 && z >= 0 && z < 8)
	{
		return 0x01;
	} else
	{
		// una de las coordenadas estaba fuera del cubo
		return 0x00;
	}
}
